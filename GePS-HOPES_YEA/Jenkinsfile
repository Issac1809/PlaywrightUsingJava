pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    environment {
        JOB_NAME = 'GePS-HOPES_YEA'
        DEVELOPMENT_BRANCH = 'GePS-HOPES'
        TESTING_BRANCH = "main"
        CREDENTIALS_ID = '813c6e55-37f7-4f42-8153-3a19b435f10b'
        MAVEN_GOALS = 'clean package'
        PROJECT_NAME = 'GEPS-HOPES_YEA'
        TEST_SUITE = "src/test/resources/testrunners/${PROJECT_NAME}_functional-test.xml"
        SUREFIRE_REPORT_DIR = "GePS-Testing/target/${PROJECT_NAME}/surefire-reports"
        CHAIN_TEST_REPORT_DIR = "GePS-Testing/target/${PROJECT_NAME}/chaintest-reports"
    }

    stages {
        stage('Checkout Development Repository (GePS)') {
            steps {
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${DEVELOPMENT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                            [$class: 'SparseCheckoutPath', path: 'GePS - YEA/']
                        ]],
                        [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 5]
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/CormSquare/GePS.git',
                        credentialsId: "${CREDENTIALS_ID}"
                    ]]
                ])
                echo "‚úÖ Checked out GePS repo directory (GePS - YEA)."
            }
        }

        stage('Checkout Testing Repository (GePS-Testing)') {
            steps {
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${TESTING_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                            [$class: 'SparseCheckoutPath', path: 'GePS_HOPES_YEA/']
                        ]],
                        [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 5]
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/CormSquare/GePS-Testing.git',
                        credentialsId: "${CREDENTIALS_ID}"
                    ]]
                ])
                echo "‚úÖ Checked out GePS-Testing repo directory (GePS-HOPES_YEA)."
            }
        }

        stage('Build YEA Project') {
            steps {
                dir('GePS-Testing') {
                    echo "‚öôÔ∏è Building YEA Project in GePS-Testing Repo..."
                    bat "mvn ${MAVEN_GOALS}"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'GePS-Testing/target/*.jar', onlyIfSuccessful: true
                }
                failure {
                    echo "‚ùå Build failed. Please check the logs."
                }
            }
        }

        stage('Start Selenium Grid') {
            steps {
                echo "üöÄ Starting Selenium Grid using Docker Compose..."
                bat 'docker-compose -f docker-compose.yaml up -d'
                sleep 10
            }
        }

        stage('Regression Automation Test') {
            steps {
                echo "üß™ Executing Regression Tests on Latest Build..."
                bat "mvn clean test -Dsurefire.suiteXmlFiles=${TEST_SUITE}"
            }
            post {
                always {
                    junit "${SUREFIRE_REPORT_DIR}/*.xml"
                }
                failure {
                    echo "‚ùå Tests failed. Please check the test reports."
                }
            }
        }

        stage('Start ChainTest Report Service') {
            steps {
                echo "üìù Starting ChainTest reporting service..."
                bat 'docker-compose -f docker-compose-h2.yml up -d'
                sleep 10
            }
        }

        stage('Publish Chain Test Report') {
            steps {
                script {
                    def reportDir = "${CHAIN_TEST_REPORT_DIR}"
                    if (fileExists("${reportDir}/index.html")) {
                        publishHTML([allowMissing: false,
                                     alwaysLinkToLastBuild: true,
                                     keepAll: true,
                                     reportDir: reportDir,
                                     reportFiles: 'index.html',
                                     reportName: 'Chain Test Report'])
                    } else {
                        echo "‚ö†Ô∏è Chain test report not found. Skipping report publishing."
                    }
                }
            }
        }

        stage('Publish Test Execution Report') {
            steps {
                script {
                    def reportDir = "${SUREFIRE_REPORT_DIR}"
                    if (fileExists("${reportDir}/TestExecutionReport.html")) {
                        publishHTML([allowMissing: false,
                                     alwaysLinkToLastBuild: true,
                                     keepAll: true,
                                     reportDir: reportDir,
                                     reportFiles: 'TestExecutionReport.html',
                                     reportName: 'HTML Extent Report'])
                    } else {
                        echo "‚ö†Ô∏è Test execution report not found. Skipping report publishing."
                    }
                }
            }
        }

        stage('Stop Selenium Grid') {
            steps {
                echo "üõë Stopping Selenium Grid..."
                bat 'docker-compose -f docker-compose.yaml down'
            }
        }

        stage('Stop ChainTest Report Service') {
            steps {
                echo "üõë Stopping ChainTest Report Service..."
                bat 'docker-compose -f docker-compose-h2.yml down'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚ùå Build Failed: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> has <font color="red">FAILED</font>.<br>
                             Please check the attached test reports for more details.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${SUREFIRE_REPORT_DIR}/TestExecutionReport.html"
                )
            }
        }
        success {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚úîÔ∏è Build Success: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> was <font color="green">SUCCESSFUL</font>.<br>
                             Please find the attached test reports for your review.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${SUREFIRE_REPORT_DIR}/TestExecutionReport.html"
                )
            }
        }
    }
}