pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    options {
        timestamps()
    }

    environment {
        // ───────────────────────────── Repo / Branch Info ─────────────────────────────
        JOB_NAME           = 'GePS-HOPES_YEA'
        DEVELOPMENT_BRANCH = 'GePS-HOPES'
        TESTING_BRANCH     = 'main'
        CREDENTIALS_ID     = '813c6e55-37f7-4f42-8153-3a19b435f10b'

        // ───────────────────── Build / Test Settings ─────────────────────
        MAVEN_GOALS        = 'clean install -DskipTests=true'
        PROJECT_NAME       = 'GePS-HOPES_YEA'
        TEST_SUITE         = "src/test/resources/testrunners/${PROJECT_NAME}_functional-test.xml"
        WORKING_DIR        = 'GePS-Testing/GePS-HOPES_YEA'

        // ─────────────────────────── Reports ────────────────────────────
        OUTPUT_REPORT_DIR      = "${WORKING_DIR}/test-output"
        ALLURE_RESULT_DIR      = "${WORKING_DIR}/allure-results"
        ALLURE_REPORT_DIR      = "${WORKING_DIR}/allure-report"

        // ─────────────────────────── Misc ──────────────────────────────
        GOOGLE_DRIVE_FOLDER_ID = '1x5EFroTJppExZpiNUD1xdNnv1Odpln2t'
        WAIT_TIME_SEC      = '20'
    }

    stages {

        // ──────────────── [1] Clean Workspace ────────────────
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo '✅ Workspace cleaned.'
            }
        }

        // ─────── [2] Parallel Git Checkouts (Development & Testing Repos) ───────
        stage('Parallel Checkout Repositories') {
            parallel {
                stage('Checkout Development Repository (GePS)') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                echo "🔁 Checking out GePS repo (GePS - YEA)..."
                                checkout([
                                    $class: 'GitSCM',
                                    branches: [[name: "${DEVELOPMENT_BRANCH}"]],
                                    extensions: [
                                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS - YEA/']]],
                                        [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 10]
                                    ],
                                    userRemoteConfigs: [[
                                        url: 'https://github.com/CormSquare/GePS.git',
                                        credentialsId: "${CREDENTIALS_ID}"
                                    ]]
                                ])
                                echo "✅ Checked out GePS repo directory (GePS - YEA)."
                            }
                        }
                    }
                }

                stage('Checkout Testing Repository (GePS-Testing)') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                dir('GePS-Testing') {
                                    echo "🔁 Checking out GePS-Testing repo (GePS-HOPES_YEA)..."
                                    checkout([
                                        $class: 'GitSCM',
                                        branches: [[name: "${TESTING_BRANCH}"]],
                                        extensions: [
                                            [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS-HOPES_YEA/']]],
                                            [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 10]
                                        ],
                                        userRemoteConfigs: [[
                                            url: 'https://github.com/CormSquare/GePS-Testing.git',
                                            credentialsId: "${CREDENTIALS_ID}"
                                        ]]
                                    ])
                                }
                                echo "✅ Checked out GePS-Testing repo directory (GePS-HOPES_YEA)."
                            }
                        }
                    }
                }
            }
        }

        // ──────────────── [3] Build Maven Project ────────────────
        stage('Build YEA Project') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "⚙️ Building YEA Project (Skipping Tests Only for Build)..."
                    bat "mvn ${MAVEN_GOALS}"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${WORKING_DIR}/target/*.jar", onlyIfSuccessful: true
                }
                failure {
                    echo "❌ Build failed. Please check the logs."
                }
            }
        }

        // ──────────────── [4] Start Docker Services ────────────────
        stage('Start Selenium Grid') {
            steps {
                dir("${WORKING_DIR}") {
                    script {
                        echo "🚀 Starting Selenium Grid..."
                        bat "docker-compose -f docker-compose.yaml up -d"
                        echo "⏳ Waiting ${WAIT_TIME_SEC}s for Selenium Grid..."
                        bat "powershell -Command Start-Sleep -Seconds ${WAIT_TIME_SEC}"
                    }
                }
            }
        }

        // ──────────────── [5] Run Tests ────────────────
        stage('Regression Automation Test') {
            steps {
                dir("${WORKING_DIR}") {
                    timeout(time: 30, unit: 'MINUTES') {
                        echo "🧪 Running Playwright tests..."
                        bat """
                        set SELENIUM_REMOTE_URL=http://localhost:4444/wd/hub
                        mvn test -DsuiteXmlFile=${TEST_SUITE}
                        """
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    echo "❌ Test run failed."
                }
            }
        }

        // ──────────────── [6] Generate Allure Report ────────────────
        stage('Allure Report Generation') {
            steps {
                dir("${WORKING_DIR}") {
                    timeout(time: 10, unit: 'MINUTES') {
                        echo "📊 Generating Allure Report..."
                        bat "allure generate allure-results --clean -o allure-report"
                        bat "powershell Compress-Archive -Path 'allure-report\\*' -DestinationPath 'AllureReport.zip'"
                    }
                }
            }
        }

        // ──────────────── [7] Publish Allure Report ────────────────
        stage('Publish Reports') {
            steps {
                script {
                    if (fileExists("${ALLURE_REPORT_DIR}/index.html")) {
                        publishHTML([
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            reportDir   : "${ALLURE_REPORT_DIR}",
                            reportFiles : 'index.html',
                            reportName  : 'AllureReport'
                        ])
                    } else {
                        echo "⚠️ Allure report not found."
                    }
                }
            }
        }

        // ──────────────── [8] Upload Allure Report to Google Drive ────────────────
        stage('Upload Allure Report to Google Drive') {
            steps {
                dir("${WORKING_DIR}") {
                    script {
                        echo "☁️ Uploading Allure Report to Google Drive via rclone..."

                        def gdriveFolderName = "Build_${env.BUILD_NUMBER}"

                        bat """
                            rclone mkdir gdrive:${gdriveFolderName} --drive-root-folder-id ${GOOGLE_DRIVE_FOLDER_ID}
                            rclone copy allure-report gdrive:${gdriveFolderName} --drive-root-folder-id ${GOOGLE_DRIVE_FOLDER_ID} --create-empty-src-dirs
                        """
                    }
                }
            }
        }

        // ──────────────── [9] Stop Docker Services ────────────────
        stage('Stop Services') {
            steps {
                dir("${WORKING_DIR}") {
                    script {
                        echo "🛑 Stopping Selenium Grid services..."
                        bat 'docker-compose -f docker-compose.yaml down'
                    }
                }
            }
        }
    }

    // ──────────────── [10] Post-Build Actions ────────────────
    post {
        failure {
            emailext(
                mimeType: 'text/html',
                to: 'issac.raja@cormsquare.com, lijo.a@cormsquare.com',
                subject: "❌ CI/CD Pipeline Alert - Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """<html>
                        <body style="font-family: Arial, sans-serif; line-height: 1.6;">
                            <h2 style="color: red;">🚨 Build Failure Notification</h2>
                            <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                            <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
                            <p><strong>Status:</strong> <span style="color:red;">FAILED</span></p>
                            <p><strong>Time:</strong> ${new Date()}</p>

                            <p>🔗 <strong>Jenkins Job:</strong> <a href="${env.BUILD_URL}">View Build #${env.BUILD_NUMBER}</a></p>

                            <p>📂 <strong>Allure Report on Google Drive:</strong>
                            <a href="https://drive.google.com/drive/folders/${GOOGLE_DRIVE_FOLDER_ID}" target="_blank">
                            Click here (Build_${env.BUILD_NUMBER})</a></p>

                            <hr style="border-top: 1px solid #ccc;"/>

                            <p>📎 <strong>Attached: AllureReport.zip</strong></p>
                            <p>Please follow these steps to view the report:</p>
                            <ol>
                                <li>Download the attached <strong>AllureReport.zip</strong></li>
                                <li>Extract the contents to a local folder</li>
                                <li>Open the <code>index.html</code> file in any web browser</li>
                            </ol>

                            <p><strong>Note:</strong> This report is fully viewable offline without needing Jenkins or Allure plugin access.</p>

                            <hr/>
                            <footer style="font-size: 12px; color: #888;">
                                <p>Warm Regards,</p>
                                <p><strong>Jenkins CI/CD System</strong><br>
                                Cormsquare Quality Engineering</p>
                                <p style="margin-top: 10px;"><em>📩 For any doubts or clarifications, please contact the QA team directly.</em></p>
                                <p><em>🚫 Please do not reply to this automated email.</em></p>
                            </footer>
                        </body>
                        </html>""",
                attachmentsPattern: "${WORKING_DIR}/AllureReport.zip"
            )
        }

        success {
            emailext(
                mimeType: 'text/html',
                to: 'issac.raja@cormsquare.com, lijo.a@cormsquare.com',
                subject: "✅ CI/CD Pipeline Success - Build PASSED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """<html>
                        <body style="font-family: Arial, sans-serif; line-height: 1.6;">
                            <h2 style="color: green;">✅ Build Success Notification</h2>
                            <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                            <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
                            <p><strong>Status:</strong> <span style="color:green;">SUCCESS</span></p>
                            <p><strong>Time:</strong> ${new Date()}</p>

                            <p>🔗 <strong>Jenkins Job:</strong> <a href="${env.BUILD_URL}">View Build #${env.BUILD_NUMBER}</a></p>

                            <p>📂 <strong>Allure Report on Google Drive:</strong>
                            <a href="https://drive.google.com/drive/folders/${GOOGLE_DRIVE_FOLDER_ID}" target="_blank">
                            Click here (Build_${env.BUILD_NUMBER})</a></p>

                            <hr style="border-top: 1px solid #ccc;"/>

                            <p>📎 <strong>Attached: AllureReport.zip</strong></p>
                            <p>To view the detailed test execution report:</p>
                            <ol>
                                <li>Download the attached <strong>AllureReport.zip</strong></li>
                                <li>Extract the contents to a local folder</li>
                                <li>Open the <code>index.html</code> file using any web browser</li>
                            </ol>

                            <p><strong>Note:</strong> The report is fully offline-friendly and does not require Jenkins or Allure plugin access.</p>

                            <hr/>
                            <footer style="font-size: 12px; color: #888;">
                                <p>Warm Regards,</p>
                                <p><strong>Jenkins CI/CD System</strong><br>
                                Cormsquare Quality Engineering</p>
                                <p style="margin-top: 10px;"><em>📩 For any doubts or clarifications, please contact the QA team directly.</em></p>
                                <p><em>🚫 Please do not reply to this automated email.</em></p>
                            </footer>
                        </body>
                        </html>""",
                attachmentsPattern: "${WORKING_DIR}/AllureReport.zip"
            )
        }

        cleanup {
            cleanWs()
        }
    }
}