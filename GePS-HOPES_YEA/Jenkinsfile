pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    options {
        timestamps()
    }

    environment {
        JOB_NAME = 'GePS-HOPES_YEA'
        DEVELOPMENT_BRANCH = 'GePS-HOPES'
        TESTING_BRANCH = "main"
        CREDENTIALS_ID = '813c6e55-37f7-4f42-8153-3a19b435f10b'
        MAVEN_GOALS = 'clean install -DskipTests=true'
        PROJECT_NAME = 'GePS-HOPES_YEA'
        TEST_SUITE = "src/test/resources/testrunners/${PROJECT_NAME}_functional-test.xml"
        WORKING_DIR = 'GePS-Testing/GePS-HOPES_YEA'
        OUTPUT_REPORT_DIR = "${WORKING_DIR}/test-output"
        CHAIN_TEST_REPORT_DIR = "${WORKING_DIR}/test-output"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo '‚úÖ Workspace cleaned.'
            }
        }

        stage('Parallel Checkout Repositories') {
            parallel {
                stage('Checkout Development Repository (GePS)') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                echo "üîÅ Checking out GePS repo (GePS - YEA)..."
                                checkout([
                                    $class: 'GitSCM',
                                    branches: [[name: "${DEVELOPMENT_BRANCH}"]],
                                    doGenerateSubmoduleConfigurations: false,
                                    extensions: [
                                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS - YEA/']]],
                                        [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 10]
                                    ],
                                    userRemoteConfigs: [[
                                        url: 'https://github.com/CormSquare/GePS.git',
                                        credentialsId: "${CREDENTIALS_ID}"
                                    ]]
                                ])
                                echo "‚úÖ Checked out GePS repo directory (GePS - YEA)."
                            }
                        }
                    }
                }

                stage('Checkout Testing Repository (GePS-Testing)') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                dir('GePS-Testing') {
                                    echo "üîÅ Checking out GePS-Testing repo (GePS-HOPES_YEA)..."
                                    checkout([
                                        $class: 'GitSCM',
                                        branches: [[name: "${TESTING_BRANCH}"]],
                                        doGenerateSubmoduleConfigurations: false,
                                        extensions: [
                                            [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS-HOPES_YEA/']]],
                                            [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 10]
                                        ],
                                        userRemoteConfigs: [[
                                            url: 'https://github.com/CormSquare/GePS-Testing.git',
                                            credentialsId: "${CREDENTIALS_ID}"
                                        ]]
                                    ])
                                }
                                echo "‚úÖ Checked out GePS-Testing repo directory (GePS-HOPES_YEA)."
                            }
                        }
                    }
                }
            }
        }

        stage('Build YEA Project') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "‚öôÔ∏è Building YEA Project (Skipping Tests Only for Build)..."
                    bat "mvn ${MAVEN_GOALS}"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${WORKING_DIR}/target/*.jar", onlyIfSuccessful: true
                }
                failure {
                    echo "‚ùå Build failed. Please check the logs."
                }
            }
        }

        stage('Start Services') {
            parallel {
                stage('Start ChainTest Service') {
                    steps {
                        dir("${WORKING_DIR}") {
                            script {
                                echo "üîé Checking for existing ChainTest container..."
                                bat(script: "docker-compose -f docker-compose-h2.yml ps -q chaintest > chaintest_id.txt", returnStatus: true)
                                def cid = readFile('chaintest_id.txt').trim()
                                if (!cid || readFile('chaintest_status.txt').trim() != 'true') {
                                    echo "üöÄ Starting ChainTest..."
                                    bat "docker-compose -f docker-compose-h2.yml up -d --remove-orphans"
                                } else {
                                    echo "‚úÖ ChainTest container is already running."
                                }
                                echo "‚è≥ Waiting for ChainTest to initialize..."
                                bat 'ping -n 11 127.0.0.1 > nul'
                            }
                        }
                    }
                }

                stage('Start Selenium Grid Service') {
                    steps {
                        dir("${WORKING_DIR}") {
                            script {
                                echo "üîé Checking for existing Selenium container..."
                                bat(script: "docker-compose -f docker-compose.yaml ps -q selenium-hub > selenium_id.txt", returnStatus: true)
                                def sid = readFile('selenium_id.txt').trim()
                                if (!sid || readFile('selenium_status.txt').trim() != 'true') {
                                    echo "üöÄ Starting Selenium Grid..."
                                    bat "docker-compose -f docker-compose.yaml up -d --remove-orphans"
                                } else {
                                    echo "‚úÖ Selenium Grid is already running."
                                }
                                echo "‚è≥ Waiting for Selenium Grid to initialize..."
                                bat 'ping -n 11 127.0.0.1 > nul'
                            }
                        }
                    }
                }
            }
        }

        stage('Regression Automation Test') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "üß™ Running Playwright tests..."
                    bat """
                        mvn test -Dsurefire.suiteXmlFiles=${TEST_SUITE} -DSELENIUM_REMOTE_URL=http://localhost:4444/wd/hub
                    """
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    echo "‚ùå Test run failed."
                }
            }
        }

        stage('Publish Reports') {
            steps {
                script {
                    if (fileExists("${CHAIN_TEST_REPORT_DIR}/index.html")) {
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: "${CHAIN_TEST_REPORT_DIR}",
                            reportFiles: 'index.html',
                            reportName: 'Chain Test Report'
                        ])
                    } else {
                        echo "‚ö†Ô∏è Chain Test report not found."
                    }

                    if (fileExists("${OUTPUT_REPORT_DIR}/emailable-report.html")) {
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: "${OUTPUT_REPORT_DIR}",
                            reportFiles: 'emailable-report.html',
                            reportName: 'HTML Extent Report'
                        ])
                    } else {
                        echo "‚ö†Ô∏è Test execution report not found."
                    }
                }
            }
        }

        stage('Stop Services') {
            steps {
                dir("${WORKING_DIR}") {
                    script {
                        echo "üõë Stopping ChainTest & Selenium Grid Services..."
                        bat 'docker-compose -f docker-compose-h2.yml down --remove-orphans'
                        bat 'docker-compose -f docker-compose.yaml down --remove-orphans'
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚ùå Build Failed: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> has <font color="red">FAILED</font>.<br>
                             Please check the attached test reports.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${OUTPUT_REPORT_DIR}/emailable-report.html"
                )
            }
        }
        success {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚úîÔ∏è Build Success: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> was <font color="green">SUCCESSFUL</font>.<br>
                             Please find the attached test reports for your review.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${OUTPUT_REPORT_DIR}/emailable-report.html"
                )
            }
        }
        cleanup {
            cleanWs()
        }
    }
}