pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    options {
        timestamps()
    }

    environment {
        JOB_NAME = 'GePS-HOPES_YEA'
        DEVELOPMENT_BRANCH = 'GePS-HOPES'
        TESTING_BRANCH = "main"
        CREDENTIALS_ID = '813c6e55-37f7-4f42-8153-3a19b435f10b'
        MAVEN_GOALS = 'clean install -DskipTests=true'
        PROJECT_NAME = 'GePS-HOPES_YEA'
        TEST_SUITE = "src/test/resources/testrunners/${PROJECT_NAME}_functional-test.xml"
        WORKING_DIR = 'GePS-Testing/GePS-HOPES_YEA'
        OUTPUT_REPORT_DIR = "${WORKING_DIR}/test-output"
        CHAIN_TEST_REPORT_DIR = "${WORKING_DIR}/test-output"
        SELENIUM_STARTED = 'false'
        CHAINTEST_STARTED = 'false'
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Development Repository (GePS)') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    retry(2) {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "${DEVELOPMENT_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS - YEA/']]],
                                [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 15]
                            ],
                            userRemoteConfigs: [[url: 'https://github.com/CormSquare/GePS.git', credentialsId: "${CREDENTIALS_ID}"]]
                        ])
                    }
                }
                echo "‚úÖ Checked out GePS repo directory (GePS - YEA)."
            }
        }

        stage('Checkout Testing Repository (GePS-Testing)') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    retry(2) {
                        dir('GePS-Testing') {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "${TESTING_BRANCH}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [
                                    [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'GePS-HOPES_YEA/']]],
                                    [$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 15]
                                ],
                                userRemoteConfigs: [[url: 'https://github.com/CormSquare/GePS-Testing.git', credentialsId: "${CREDENTIALS_ID}"]]
                            ])
                        }
                    }
                }
                echo "‚úÖ Checked out GePS-Testing repo directory (GePS-HOPES_YEA)."
            }
        }

        stage('Build YEA Project') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "‚öôÔ∏è Building YEA Project (Skipping Tests Only for Build)..."
                    bat "mvn ${MAVEN_GOALS}"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${WORKING_DIR}/target/*.jar", onlyIfSuccessful: true
                }
                failure {
                    echo "‚ùå Build failed. Please check the logs."
                }
            }
        }

        stage('Start Services') {
            parallel {
                stage('Start Selenium Grid') {
                    steps {
                        dir("${WORKING_DIR}") {
                            echo "WORKING_DIR is set to: ${WORKING_DIR}"
                            script {
                                if (!fileExists('docker-compose.yaml')) {
                                    error "docker-compose.yaml not found! Cannot start Selenium Grid."
                                }

                                def containerId = bat(script: 'docker-compose -f docker-compose.yaml ps -q selenium-hub', returnStdout: true).trim()
                                if (containerId == '') {
                                    echo "üîÑ selenium-hub not found. Starting Selenium Grid..."
                                    bat 'docker-compose -f docker-compose.yaml up -d --remove-orphans'
                                    env.SELENIUM_STARTED = "true"
                                } else {
                                    def status = bat(script: "docker inspect -f \"{{.State.Running}}\" ${containerId}", returnStdout: true).trim()
                                    if (status != "true") {
                                        echo "‚ôªÔ∏è selenium-hub exists but is not running. Restarting..."
                                        bat 'docker-compose -f docker-compose.yaml up -d --remove-orphans'
                                    } else {
                                        echo "üü¢ Selenium Grid is already running."
                                    }
                                }
                            }
                            sleep(15)
                        }
                    }
                }

                stage('Start ChainTest Report Service') {
                    steps {
                        dir("${WORKING_DIR}") {
                            echo "WORKING_DIR is set to: ${WORKING_DIR}"
                            script {
                                if (!fileExists('docker-compose-h2.yml')) {
                                    error "docker-compose-h2.yml not found! Cannot start ChainTest reporting service."
                                }

                                def containerId = bat(script: 'docker-compose -f docker-compose-h2.yml ps -q chaintest', returnStdout: true).trim()
                                if (containerId == '') {
                                    echo "üîÑ chaintest not found. Starting ChainTest reporting service..."
                                    bat 'docker-compose -f docker-compose-h2.yml up -d --remove-orphans'
                                    env.CHAINTEST_STARTED = "true"
                                } else {
                                    def status = bat(script: "docker inspect -f \"{{.State.Running}}\" ${containerId}", returnStdout: true).trim()
                                    if (status != "true") {
                                        echo "‚ôªÔ∏è chaintest exists but is not running. Restarting..."
                                        bat 'docker-compose -f docker-compose-h2.yml up -d --remove-orphans'
                                    } else {
                                        echo "üü¢ ChainTest service is already running."
                                    }
                                }
                            }
                            sleep(15)
                        }
                    }
                }
            }
        }

        stage('Regression Automation Test') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "üß™ Executing Regression Tests on Latest Build..."
                    bat "mvn test -DSELENIUM_REMOTE_URL=http://localhost:4444 -Dsurefire.suiteXmlFiles=${TEST_SUITE}"
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    echo "‚ùå Tests failed. Please check the test reports."
                }
            }
        }

        stage('Publish Reports') {
            steps {
                script {
                    if (fileExists("${CHAIN_TEST_REPORT_DIR}/index.html")) {
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: "${CHAIN_TEST_REPORT_DIR}",
                            reportFiles: 'index.html',
                            reportName: 'Chain Test Report'
                        ])
                    } else {
                        echo "‚ö†Ô∏è Chain test report not found. Skipping."
                    }

                    if (fileExists("${OUTPUT_REPORT_DIR}/emailable-report.html")) {
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: "${OUTPUT_REPORT_DIR}",
                            reportFiles: 'emailable-report.html',
                            reportName: 'HTML Extent Report'
                        ])
                    } else {
                        echo "‚ö†Ô∏è Test execution report not found. Skipping."
                    }
                }
            }
        }

        stage('Stop Services') {
            parallel {
                stage('Stop Selenium Grid') {
                    steps {
                        dir("${WORKING_DIR}") {
                            script {
                                echo "SELENIUM_STARTED: ${env.SELENIUM_STARTED}"
                                if (env.SELENIUM_STARTED == 'true') {
                                    echo "üõë Stopping Selenium Grid..."
                                    bat 'docker ps -a'
                                    bat 'docker-compose -f docker-compose.yaml down --remove-orphans'
                                    bat 'docker ps -a'
                                } else {
                                    echo "‚ÑπÔ∏è Selenium Grid was not started by this job. Skipping stop."
                                }
                            }
                        }
                    }
                }

                stage('Stop ChainTest Service') {
                    steps {
                        dir("${WORKING_DIR}") {
                            script {
                                echo "CHAINTEST_STARTED: ${env.CHAINTEST_STARTED}"
                                if (env.CHAINTEST_STARTED == 'true') {
                                    echo "üõë Stopping ChainTest Service..."
                                    bat 'docker ps -a'
                                    bat 'docker-compose -f docker-compose-h2.yml down --remove-orphans'
                                    bat 'docker ps -a'
                                } else {
                                    echo "‚ÑπÔ∏è ChainTest service was not started by this job. Skipping stop."
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚ùå Build Failed: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> has <font color="red">FAILED</font>.<br>
                             Please check the attached test reports.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${OUTPUT_REPORT_DIR}/emailable-report.html"
                )
            }
        }
        success {
            script {
                emailext(
                    to: 'issac.raja@cormsquare.com',
                    subject: "‚úîÔ∏è Build Success: ${env.JOB_NAME}",
                    body: """Hi Team,<br><br>
                             The Jenkins build for <b>${env.JOB_NAME}</b> was <font color="green">SUCCESSFUL</font>.<br>
                             Please find the attached test reports for your review.<br><br>
                             <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                    attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}/index.html, ${OUTPUT_REPORT_DIR}/emailable-report.html"
                )
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
