/*  Jenkinsfile — GePS-HOPES_YEA  */
pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    options {
        timestamps()
    }

    environment {
        // ── Repo / Branch Info ───────────────────────────────────────────────
        JOB_NAME           = 'GePS-HOPES_YEA'
        DEVELOPMENT_BRANCH = 'GePS-HOPES'
        TESTING_BRANCH     = 'main'
        CREDENTIALS_ID     = '813c6e55-37f7-4f42-8153-3a19b435f10b'

        // ── Build / Test Settings ────────────────────────────────────────────
        MAVEN_GOALS        = 'clean install -DskipTests=true'
        PROJECT_NAME       = 'GePS-HOPES_YEA'
        TEST_SUITE         = "src/test/resources/testrunners/${PROJECT_NAME}_functional-test.xml"
        WORKING_DIR        = 'GePS-Testing/GePS-HOPES_YEA'

        // ── Report Paths ─────────────────────────────────────────────────────
        OUTPUT_REPORT_DIR     = "${WORKING_DIR}/test-output"
        CHAIN_TEST_REPORT_DIR = "${WORKING_DIR}/test-output"

        // ── Miscellaneous ────────────────────────────────────────────────────
        WAIT_TIME_SEC = '20'
    }

    stages {

        /* ───────────────────────── Clean Workspace ───────────────────────── */
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo '✅ Workspace cleaned.'
            }
        }

        /* ──────────────── Parallel Checkout of Repositories ──────────────── */
        stage('Checkout Repositories') {
            parallel {
                stage('Checkout GePS') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                echo "🔁 Checking out GePS repo..."
                                checkout([
                                    $class: 'GitSCM',
                                    branches: [[name: "${DEVELOPMENT_BRANCH}"]],
                                    extensions: [
                                        [$class: 'SparseCheckoutPaths',
                                         sparseCheckoutPaths: [[path: 'GePS - YEA/']]],
                                        [$class: 'CloneOption',
                                         shallow: true, depth: 1, noTags: true, timeout: 10]
                                    ],
                                    userRemoteConfigs: [[
                                        url: 'https://github.com/CormSquare/GePS.git',
                                        credentialsId: "${CREDENTIALS_ID}"
                                    ]]
                                ])
                                echo "✅ GePS repo checkout complete."
                            }
                        }
                    }
                }

                stage('Checkout GePS-Testing') {
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            retry(2) {
                                dir('GePS-Testing') {
                                    echo "🔁 Checking out GePS-Testing repo..."
                                    checkout([
                                        $class: 'GitSCM',
                                        branches: [[name: "${TESTING_BRANCH}"]],
                                        extensions: [
                                            [$class: 'SparseCheckoutPaths',
                                             sparseCheckoutPaths: [[path: 'GePS-HOPES_YEA/']]],
                                            [$class: 'CloneOption',
                                             shallow: true, depth: 1, noTags: true, timeout: 10]
                                        ],
                                        userRemoteConfigs: [[
                                            url: 'https://github.com/CormSquare/GePS-Testing.git',
                                            credentialsId: "${CREDENTIALS_ID}"
                                        ]]
                                    ])
                                }
                                echo "✅ GePS-Testing repo checkout complete."
                            }
                        }
                    }
                }
            }
        }

        /* ────────────────────── Build with Maven (no tests) ───────────────── */
        stage('Build YEA Project') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "⚙️ Building project (skipping tests)..."
                    bat "mvn ${MAVEN_GOALS}"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${WORKING_DIR}/target/*.jar", onlyIfSuccessful: true
                }
                failure {
                    echo "❌ Build failed."
                }
            }
        }

        /* ────────────────────── Start Docker Services ─────────────────────── */
        stage('Start Services') {
            steps {
                dir("${WORKING_DIR}") {
                    script {
                        echo "🔎 Verifying Docker daemon..."
                        if (bat(script: 'docker info >nul 2>&1', returnStatus: true) != 0) {
                            error('❌ Docker is not running or accessible.')
                        }

                        echo "🚀 Starting ChainTest service..."
                        def chainTestRunning = bat(
                            script: "docker compose -f docker-compose-h2.yml ps -q chaintest",
                            returnStdout: true
                        ).trim()
                        if (!chainTestRunning) {
                            bat "docker compose -f docker-compose-h2.yml up -d --remove-orphans"
                        } else {
                            echo "✅ ChainTest already running."
                        }

                        echo "⏳ Waiting ${WAIT_TIME_SEC}s for ChainTest..."
                        bat "timeout /t ${WAIT_TIME_SEC} > nul"

                        echo "🚀 Starting Selenium Grid service..."
                        def seleniumRunning = bat(
                            script: "docker compose -f docker-compose.yaml ps -q selenium-hub",
                            returnStdout: true
                        ).trim()
                        if (!seleniumRunning) {
                            bat "docker compose -f docker-compose.yaml up -d --remove-orphans"
                        } else {
                            echo "✅ Selenium Grid already running."
                        }

                        echo "⏳ Waiting ${WAIT_TIME_SEC}s for Selenium Grid..."
                        bat "timeout /t ${WAIT_TIME_SEC} > nul"
                    }
                }
            }
        }

        /* ───────────────────────────── Run Tests ──────────────────────────── */
        stage('Regression Automation Test') {
            steps {
                dir("${WORKING_DIR}") {
                    timeout(time: 30, unit: 'MINUTES') {
                        echo "🧪 Executing Playwright test suite..."
                        bat """
                            mvn test ^
                                -Dsurefire.suiteXmlFiles=${TEST_SUITE} ^
                                -DSELENIUM_REMOTE_URL=http://localhost:4444/wd/hub
                        """
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    echo "❌ Test execution failed."
                }
            }
        }

        /* ────────────────────── Publish HTML Reports ─────────────────────── */
        stage('Publish Reports') {
            steps {
                script {
                    if (fileExists("${CHAIN_TEST_REPORT_DIR}/index.html")) {
                        publishHTML([
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            reportDir: "${CHAIN_TEST_REPORT_DIR}",
                            reportFiles: 'index.html',
                            reportName: 'Chain Test Report'
                        ])
                    } else {
                        echo "⚠️ Chain Test Report not found."
                    }

                    if (fileExists("${OUTPUT_REPORT_DIR}/emailable-report.html")) {
                        publishHTML([
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            reportDir: "${OUTPUT_REPORT_DIR}",
                            reportFiles: 'emailable-report.html',
                            reportName: 'HTML Extent Report'
                        ])
                    } else {
                        echo "⚠️ Test Execution Report not found."
                    }
                }
            }
        }

        /* ─────────────────────── Stop Docker Services ─────────────────────── */
        stage('Stop Services') {
            steps {
                dir("${WORKING_DIR}") {
                    echo "🛑 Stopping services..."
                    bat 'docker compose -f docker-compose-h2.yml down --remove-orphans'
                    bat 'docker compose -f docker-compose.yaml down --remove-orphans'
                }
            }
        }
    }

    /* ────────────────────── Notifications & Cleanup ─────────────────────── */
    post {
        failure {
            emailext(
                to: 'issac.raja@cormsquare.com',
                subject: "❌ Build Failed: ${env.JOB_NAME}",
                body: """Hi Team,<br><br>
                         The Jenkins build for <b>${env.JOB_NAME}</b> has <font color="red">FAILED</font>.<br>
                         Please check the attached test reports.<br><br>
                         <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}\\index.html, ${OUTPUT_REPORT_DIR}\\emailable-report.html"
            )
        }

        success {
            emailext(
                to: 'issac.raja@cormsquare.com',
                subject: "✔️ Build Success: ${env.JOB_NAME}",
                body: """Hi Team,<br><br>
                         The Jenkins build for <b>${env.JOB_NAME}</b> was <font color="green">SUCCESSFUL</font>.<br>
                         Please find the attached test reports.<br><br>
                         <a href="${env.BUILD_URL}">Click here to view Jenkins Job</a>""",
                attachmentsPattern: "${CHAIN_TEST_REPORT_DIR}\\index.html, ${OUTPUT_REPORT_DIR}\\emailable-report.html"
            )
        }

        cleanup {
            cleanWs()
        }
    }
}